// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid()) 
  email             String    @unique
  password          String?    
  isGoogleUser      Boolean   @default(false)    
  isEmailVerified   Boolean   @default(false)
  isAdmin           Boolean   @default(false)
  refreshToken      String? 
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  role              Role       @default(ARTIST)
  profile           Profile?
  otp               Otp?
  referral          Referral?
  referrer          Referral? @relation("ReferredBy", fields: [referrerEmail], references: [userEmail], onDelete: Cascade, onUpdate: Cascade)
  referrerEmail     String?
}

enum Role{
  ADMIN
  ARTIST
  USER
}

model Profile {
  id                      String    @id @default(uuid()) 
  user                    User      @relation(fields: [userEmail], references: [email])  
  userEmail               String    @unique
  profilePicUri           String?
  mobileNumber            String?
  isMobileNumberVerified  Boolean   @default(false)
  name                    String?
  briefBio                String?
  websiteLink             String?
  socialMediaHandle       String?
  bank                    String?
  accountNumber           String?
  accountName             String?
  earning                 Decimal   @default(0.0)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  artwork                 ArtWork[]
  order                   Order[]
  review                  Review[]
  albums                  Album[]
  stories                 Story[]
  likes                   Like[]
  adverts                   Advert[]
  subscriptions           Subscription[]
}

model Referral {
  id              String    @id @default(uuid()) 
  user            User      @relation(fields: [userEmail], references: [email])  
  userEmail       String    @unique
  code            String    @unique
  balance         Decimal   @default(0.0)
  referred        User[]    @relation("ReferredBy")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
}

model Story {
  id              String    @id @default(uuid())
  title           String
  content         String
  firstImage      String?
  secondImage     String?
  thirdImage      String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  profile         Profile   @relation(fields: [profileId], references: [id])
  profileId       String
  numberOfLikes   Int       @default(0) 
}

model Otp {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id])  
  userId          String    @unique
  otp             String
  createdAt       DateTime  @default(now())
}

model Category {
  id              String    @id @default(uuid())
  title           String
  description     String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
}

model ArtWork {
  id                String    @id @default(uuid())
  title             String
  description       String?
  quantity          Int?
  price             Decimal
  saleType          SaleType
  purchaseStatus    PurchaseStatus    @default(InStock)
  imageUris         String[]
  artistProfile     Profile  @relation(fields: [artistProfileId], references: [id])
  artistProfileId   String
  category          String[]
  review            Review[]
  orderItem         Order_Item[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  numberOfLikes     Int       @default(0)
}

enum PurchaseStatus {
  SoldOut
  InStock
}

enum SaleType {
  ORIGINAL
  PRINT
}

model Album {
  id                String      @id @default(uuid())
  title             String
  subTitle          String?
  category          String[]
  profileId         String      
  profile           Profile     @relation(fields: [profileId], references: [id])
  albumImageUris    String[]
  description       String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  numberOfLikes     Int         @default(0)
}

model StockImage {
  id                String      @id @default(uuid())
  stockImageUrl     String
  createdAt         DateTime    @default(now())
}

model Order {
  id                      String    @id @default(uuid())
  profile                 Profile   @relation(fields: [profileId], references: [id])
  profileId               String
  deliveryAddress         String?
  city                    String?
  shippingCost            Decimal?
  zip                     String?
  country                 String?
  referrerCode            String?
  totalPrice              Decimal?      @default(0)
  status                  OrderStatus   @default(PENDING) 
  payment                 Payment?
  shipment                Shipment?
  createdAt               DateTime  @default(now())
  orderItem               Order_Item[]
}

model Order_Item{
  id          String    @id @default(uuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  artworkId   String
  artwork     ArtWork    @relation(fields: [artworkId], references: [id])
  quantity    Int
  price       Decimal
  addedAt     DateTime  @default(now())
}

model Review{
  id                String    @id @default(uuid())
  artwork           ArtWork   @relation(fields: [artworkId], references: [id])
  artworkId         String
  profile           Profile   @relation(fields: [profileId], references: [id])
  profileId         String
  comment           String
  rating            Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Payment {
  id                String    @id @default(uuid())
  amount            Decimal
  transactionReference     String    @unique
  payeeEmail        String?
  paymentStatus     PaymentStatus @default(PENDING)
  transactionTime   DateTime  @default(now())
  order             Order  @relation(fields: [orderId], references: [id])  
  orderId           String  @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
}

model Transfer {
  id                String    @id @default(uuid())
  amount            Decimal
  transactionId     String
  payeeEmail        String?
  accountName       String
  bankName          String
  bankCode          String
  type              String
  reference         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED 
  CANCELED
  COMPLETED
}

model File {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  fileType          Type
  title             String
  path              String
}

enum Type {
  IMAGE
  AUDIO
  VIDEO
}

model Shipment {
  id                String      @id @default(uuid())
  trackingId        String
  cost              Decimal
  order             Order       @relation(fields: [orderId], references: [id])  
  orderId           String      @unique
  isPaid            Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Like {
  id          String   @id @default(uuid())
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   String
  itemId      String
  itemType    LikeType
  createdAt   DateTime @default(now())
}

enum LikeType {
  ARTWORK
  BLOG
  ALBUM
}

model Advert {
  id          String        @id @default(uuid())
  profile     Profile       @relation(fields: [adminProfileId], references: [id])
  adminProfileId   String   
  title       String
  link        String
  text        String        @db.Text
  imageUris   String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
} 

model Subscription {
  id          String        @id @default(uuid())
  profile     Profile       @relation(fields: [profileId], references: [id])
  profileId   String
  interval    String
  amount      String
  duration    String
  status      SubscriptionStatus
  plan_token  String
  currency    String
  subscriptionDate   DateTime      @default(now())
  subscriptionExpirtDate  DateTime      
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
}