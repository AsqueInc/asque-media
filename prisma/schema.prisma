// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid()) 
  email             String    @unique
  password          String?    
  isGoogleUser      Boolean   @default(false)    
  isEmailVerified   Boolean   @default(false)
  isAdmin           Boolean   @default(false)
  refreshToken      String? 
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  role              Role       @default(ARTIST)
  profile           Profile?
  otp               Otp?
  referral           Referral?
  referrer Referral? @relation("ReferredBy", fields: [referrerEmail], references: [userEmail], onDelete: Cascade, onUpdate: Cascade)
  referrerEmail String?
}

enum Role{
  ADMIN
  ARTIST
  USER
}

model Profile {
  id                      String    @id @default(uuid()) 
  user                    User      @relation(fields: [userEmail], references: [email])  
  userEmail                  String    @unique
  profilePicUri           String?
  mobileNumber            String?
  isMobileNumberVerified  Boolean   @default(false)
  name                    String?
  briefBio              String?
  websiteLink            String?
  socialMediaHandle         String?
  bank           String?
  accountNumber String?
  accountName   String?
  earning                 Decimal   @default(0.0)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  artwork                 ArtWork[]
  order                   Order[]
  review                  Review[]
  albums                  Album[]
  stories                 Story[]
  podcast                 Podcast[]
}

model Referral {
    id                    String    @id @default(uuid()) 
    user                  User      @relation(fields: [userEmail], references: [email])  
    userEmail             String    @unique
    code                  String    @unique
    balance               Decimal   @default(0.0)
    referred          User[]            @relation("ReferredBy")
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Story {
  id        String      @id @default(uuid())
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profile     Profile      @relation(fields: [profileId], references: [id])
  profileId   String
  imageUris   String[]    
}

model Podcast{
  id            String    @id @default(uuid()) 
  title         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile    @relation(fields: [profileId], references: [id])
  profileId     String
  description   String?
  uri    String?
  type  PodcastType   @default(AUDIO)
}

enum PodcastType {
  AUDIO
  VIDEO
}

model Otp {
  id                      String    @id @default(uuid())
  user                    User      @relation(fields: [userId], references: [id])  
  userId                  String    @unique
  otp                     String
  createdAt               DateTime  @default(now())
}

model Category {
  id                      String    @id @default(uuid())
  title                   String
  description             String
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model ArtWork {
  id                String    @id @default(uuid())
  title             String
  description       String?
  quantity          Int?
  price             Decimal
  saleType          SaleType  
  imageUris         String[]
  artistProfile     Profile  @relation(fields: [artistProfileId], references: [id])
  artistProfileId   String
  review            Review[]
  orderItem         Order_Item[]
  category          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

enum SaleType {
  ORIGINAL
  PRINT
}

model Album {
  id                String      @id @default(uuid())
  title             String
  category          String
  profileId         String      @unique
  profile           Profile     @relation(fields: [profileId], references: [id])
  albumImageUris    String[]
  description       String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Order {
  id                      String    @id @default(uuid())
  profile                 Profile   @relation(fields: [profileId], references: [id])
  profileId               String
  deliveryAddress         String?
  city                    String?
  zip                     String?
  country                 String?
  referrerCode            String?
  totalPrice              Decimal?      @default(0)
  status                  OrderStatus   @default(PENDING) 
  payment                 Payment?
  createdAt               DateTime  @default(now())
  orderItem               Order_Item[]
}

model Order_Item{
  id          String    @id @default(uuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  artworkId   String
  artwork     ArtWork    @relation(fields: [artworkId], references: [id])
  quantity    Int
  price       Decimal
  addedAt     DateTime  @default(now())
}

model Review{
  id                String    @id @default(uuid())
  artwork           ArtWork   @relation(fields: [artworkId], references: [id])
  artworkId         String
  profile           Profile   @relation(fields: [profileId], references: [id])
  profileId         String
  comment           String
  rating            Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Payment {
  id                String    @id @default(uuid())
  amount            Decimal
  transactionId     String
  payeeId           String
  payeeEmail        String?
  transactionTime   DateTime  @default(now())
  order             Order  @relation(fields: [orderId], references: [id])  
  orderId           String  @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Transfer {
  id                String    @id @default(uuid())
  amount            Decimal
  transactionId     String
  payeeEmail        String?
  accountName       String
  bankName          String
  bankCode          String
  type              String
  reference         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED 
  CANCELED
  COMPLETED
}

model File{
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  fileType          Type
  title             String
  path              String
}

enum Type {
  IMAGE
  AUDIO
  VIDEO
}